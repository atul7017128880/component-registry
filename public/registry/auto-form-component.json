{
  "name": "Auto Form Component",
  "type": "registry:block",
  "registryDependencies": [
    "button",
    "input",
    "label",
    "card",
    "separator",
    "checkbox",
    "textarea",
    "radio-group",
    "select",
    "switch",
    "popover",
    "calendar",
    "badge",
    "command",
    "drawer"
  ],
  "dependencies": [
    "zod-auto-form"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "import { Button } from \"@/components/ui/button\";\r\nimport { Loader2 } from \"lucide-react\";\r\nimport type { SubmitButton } from \"zod-auto-form\";\r\nexport default function AutoFormButton({\r\n\tchildren,\r\n\tformId,\r\n\tisLoading,\r\n\tonClick,\r\n}: SubmitButton) {\r\n\treturn (\r\n\t\t<Button\r\n\t\t\tclassName=\"w-full mt-2\"\r\n\t\t\ttype=\"submit\"\r\n\t\t\tform={formId}\r\n\t\t\tdisabled={isLoading}\r\n\t\t\tonClick={onClick}\r\n\t\t>\r\n\t\t\t{isLoading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : children}\r\n\t\t</Button>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-form/button.tsx",
      "target": "components/ui/auto-form/button.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { Input } from \"@/components/ui/input\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { TextInput } from \"zod-auto-form\";\r\nimport FieldWarper from \"./FieldWarper\";\r\n\r\nexport default function AutoFormInput({\r\n\tdescription,\r\n\tdisabled,\r\n\terrorMessages,\r\n\tid,\r\n\tisError,\r\n\tlabel,\r\n\tonBlur,\r\n\tonChange,\r\n\tplaceholder,\r\n\ttitle,\r\n\tvalue,\r\n}: TextInput) {\r\n\tconsole.log(errorMessages);\r\n\treturn (\r\n\t\t<FieldWarper\r\n\t\t\ttitle={title || label}\r\n\t\t\tlabel={label}\r\n\t\t\terrorMessages={errorMessages}\r\n\t\t\tdescription={description}\r\n\t\t\tid={id}\r\n\t\t>\r\n\t\t\t<Input\r\n\t\t\t\tdisabled={disabled}\r\n\t\t\t\tonChange={(e) => onChange(e.target.value)}\r\n\t\t\t\tonBlur={onBlur}\r\n\t\t\t\tclassName={cn(isError && \"border-red-500\")}\r\n\t\t\t\tid={id}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tvalue={value}\r\n\t\t\t/>\r\n\t\t</FieldWarper>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-form/input.tsx",
      "target": "components/ui/auto-form/input.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { Label } from \"@/components/ui/label\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport type React from \"react\";\r\n\r\nexport default function FieldWarper({\r\n\ttitle,\r\n\tlabel,\r\n\terrorMessages,\r\n\tdescription,\r\n\tid,\r\n\tchildren,\r\n}: {\r\n\ttitle: string;\r\n\tlabel: string;\r\n\terrorMessages: { message: string }[];\r\n\tdescription: string;\r\n\tid: string;\r\n\tchildren: React.ReactNode;\r\n}) {\r\n\treturn (\r\n\t\t<div className=\"w-full justify-start text-left font-normal\">\r\n\t\t\t<Label\r\n\t\t\t\tclassName={cn(\r\n\t\t\t\t\t\"text-sm mb-1 ml-1\",\r\n\t\t\t\t\terrorMessages.length > 0 && \"text-red-500\",\r\n\t\t\t\t)}\r\n\t\t\t\thtmlFor={id}\r\n\t\t\t>\r\n\t\t\t\t{title || label}\r\n\t\t\t</Label>\r\n\t\t\t{children}\r\n\t\t\t<p className=\"text-sm text-red-500\">\r\n\t\t\t\t{errorMessages.map((error) => error.message)}\r\n\t\t\t</p>\r\n\t\t\t{description && (\r\n\t\t\t\t<p\r\n\t\t\t\t\tclassName={cn(\r\n\t\t\t\t\t\t\"px-1 text-xs text-gray-500 dark:text-gray-400 mt-1\",\r\n\t\t\t\t\t\terrorMessages.length > 0 && \"text-red-500\",\r\n\t\t\t\t\t)}\r\n\t\t\t\t>\r\n\t\t\t\t\t{description}\r\n\t\t\t\t</p>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-form/FieldWarper.tsx",
      "target": "components/ui/auto-form/FieldWarper.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { Textarea } from \"@/components/ui/textarea\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { TextAreaInput } from \"zod-auto-form\";\r\nimport FieldWarper from \"./FieldWarper\";\r\n\r\nexport default function AutoFormTextArea({\r\n\tdisabled,\r\n\tonChange,\r\n\tplaceholder,\r\n\tonBlur,\r\n\ttitle,\r\n\tvalue,\r\n\t...rest\r\n}: TextAreaInput) {\r\n\treturn (\r\n\t\t<FieldWarper title={title} {...rest}>\r\n\t\t\t<Textarea\r\n\t\t\t\tid={rest.id}\r\n\t\t\t\tclassName={cn(rest.errorMessages.length > 0 && \"border-red-500\")}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tonChange={(e) => onChange(e.target.value)}\r\n\t\t\t\tonBlur={onBlur}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tdisabled={disabled}\r\n\t\t\t/>\r\n\t\t</FieldWarper>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-form/textarea.tsx",
      "target": "components/ui/auto-form/textarea.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { Card, CardContent } from \"@/components/ui/card\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport type { CheckboxInput } from \"zod-auto-form\";\r\nfunction AutoFormCheckboxV1({\r\n\tdescription,\r\n\tdisabled,\r\n\terrorMessages,\r\n\tid,\r\n\tisError,\r\n\tlabel,\r\n\tonBlur,\r\n\tonChange,\r\n\r\n\ttitle,\r\n\tvalue,\r\n}: CheckboxInput) {\r\n\treturn (\r\n\t\t<Card className={cn(isError && \"border-red-500\")}>\r\n\t\t\t<CardContent className=\"flex flex-row items-start gap-3\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\tid={id}\r\n\t\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\t\tonBlur={onBlur}\r\n\t\t\t\t\t\tchecked={value}\r\n\t\t\t\t\t\tonCheckedChange={onChange}\r\n\t\t\t\t\t\tclassName={cn(isError && \"border-red-500\")}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"space-y-1 leading-none\">\r\n\t\t\t\t\t<Label htmlFor={id} className={cn(isError && \"text-red-500\")}>\r\n\t\t\t\t\t\t{title || label}\r\n\t\t\t\t\t</Label>\r\n\t\t\t\t\t<label\r\n\t\t\t\t\t\thtmlFor={id}\r\n\t\t\t\t\t\tclassName={cn(\r\n\t\t\t\t\t\t\t\"text-sm text-muted-foreground\",\r\n\t\t\t\t\t\t\tisError && \"text-red-500\",\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{description}\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t{isError && (\r\n\t\t\t\t\t\t<p className=\"text-sm text-red-500\">\r\n\t\t\t\t\t\t\t{errorMessages.map((error) => error.message).join(\", \")}\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t);\r\n}\r\n\r\nexport default AutoFormCheckboxV1;\r\n",
      "path": "ui/auto-form/checkbox_ui_1.tsx",
      "target": "components/ui/auto-form/checkbox_ui_1.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport type { CheckboxInput } from \"zod-auto-form\";\r\nfunction AutoFormCheckboxV2({\r\n\tdescription,\r\n\tdisabled,\r\n\terrorMessages,\r\n\tid,\r\n\tisError,\r\n\tlabel,\r\n\tonBlur,\r\n\tonChange,\r\n\ttitle,\r\n\tvalue,\r\n}: CheckboxInput) {\r\n\treturn (\r\n\t\t<div className=\"flex flex-row items-start gap-3\">\r\n\t\t\t<div>\r\n\t\t\t\t<Checkbox\r\n\t\t\t\t\tid={id}\r\n\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\tonBlur={onBlur}\r\n\t\t\t\t\tchecked={value}\r\n\t\t\t\t\tonCheckedChange={onChange}\r\n\t\t\t\t\tclassName={cn(isError && \"border-red-500\")}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"space-y-1 leading-none\">\r\n\t\t\t\t<Label htmlFor={id} className={cn(isError && \"text-red-500\")}>\r\n\t\t\t\t\t{title || label}\r\n\t\t\t\t</Label>\r\n\t\t\t\t<label\r\n\t\t\t\t\thtmlFor={id}\r\n\t\t\t\t\tclassName={cn(\r\n\t\t\t\t\t\t\"text-sm text-muted-foreground\",\r\n\t\t\t\t\t\tisError && \"text-red-500\",\r\n\t\t\t\t\t)}\r\n\t\t\t\t>\r\n\t\t\t\t\t{description}\r\n\t\t\t\t</label>\r\n\t\t\t\t{isError && (\r\n\t\t\t\t\t<p className=\"text-sm text-red-500\">\r\n\t\t\t\t\t\t{errorMessages.map((error) => error.message).join(\", \")}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default AutoFormCheckboxV2;\r\n",
      "path": "ui/auto-form/checkbox_ui_2.tsx",
      "target": "components/ui/auto-form/checkbox_ui_2.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import {\r\n\tCard,\r\n\tCardContent,\r\n\tCardDescription,\r\n\tCardFooter,\r\n\tCardHeader,\r\n\tCardTitle,\r\n} from \"@/components/ui/card\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { RadioGroupInput } from \"zod-auto-form\";\r\n\r\nexport default function AutoFormRadioGroup({\r\n\tdescription,\r\n\tdisabled,\r\n\terrorMessages,\r\n\tisError,\r\n\tlabel,\r\n\tonBlur,\r\n\tonChange,\r\n\tselectOptions,\r\n\ttitle,\r\n\tvalue,\r\n}: RadioGroupInput) {\r\n\tif (!selectOptions) {\r\n\t\treturn null;\r\n\t}\r\n\treturn (\r\n\t\t<Card className={cn(isError && \"border-red-500\")}>\r\n\t\t\t<CardHeader>\r\n\t\t\t\t<CardTitle className={cn(isError && \"text-red-500\")}>\r\n\t\t\t\t\t{title || label}\r\n\t\t\t\t</CardTitle>\r\n\t\t\t\t<CardDescription className={cn(isError && \"text-red-500\")}>\r\n\t\t\t\t\t{description}\r\n\t\t\t\t</CardDescription>\r\n\t\t\t</CardHeader>\r\n\t\t\t<CardContent className=\"flex flex-row items-start gap-3\">\r\n\t\t\t\t<RadioGroup\r\n\t\t\t\t\tclassName={cn(isError && \"border-red-500\")}\r\n\t\t\t\t\tdefaultValue={value}\r\n\t\t\t\t\tonValueChange={onChange}\r\n\t\t\t\t\tonBlur={onBlur}\r\n\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t>\r\n\t\t\t\t\t{selectOptions.map((option) => (\r\n\t\t\t\t\t\t<div className=\"flex items-center space-x-2\" key={option}>\r\n\t\t\t\t\t\t\t<RadioGroupItem\r\n\t\t\t\t\t\t\t\tclassName={cn(isError && \"border-red-500\")}\r\n\t\t\t\t\t\t\t\tvalue={option}\r\n\t\t\t\t\t\t\t\tid={option}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<Label htmlFor={option} className={cn(isError && \"text-red-500\")}>\r\n\t\t\t\t\t\t\t\t{option}\r\n\t\t\t\t\t\t\t</Label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</RadioGroup>\r\n\t\t\t</CardContent>\r\n\t\t\t{isError && errorMessages && (\r\n\t\t\t\t<CardFooter>\r\n\t\t\t\t\t<p className=\"text-sm text-red-500\">\r\n\t\t\t\t\t\t{errorMessages.map((error) => error.message).join(\", \")}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</CardFooter>\r\n\t\t\t)}\r\n\t\t</Card>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-form/radio-group.tsx",
      "target": "components/ui/auto-form/radio-group.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import {\r\n\tSelect,\r\n\tSelectContent,\r\n\tSelectItem,\r\n\tSelectTrigger,\r\n\tSelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { SelectInput } from \"zod-auto-form\";\r\nimport FieldWarper from \"./FieldWarper\";\r\n\r\nexport default function AutoFormSelect({\r\n\tselectOptions,\r\n\tplaceholder,\r\n\tdisabled,\r\n\tonChange,\r\n\ttitle,\r\n\tvalue,\r\n\t...rest\r\n}: SelectInput) {\r\n\treturn (\r\n\t\t<FieldWarper title={title} {...rest}>\r\n\t\t\t<Select defaultValue={value} onValueChange={onChange} disabled={disabled}>\r\n\t\t\t\t<SelectTrigger\r\n\t\t\t\t\tid={rest.id}\r\n\t\t\t\t\tclassName={cn(\r\n\t\t\t\t\t\t\"w-full\",\r\n\t\t\t\t\t\trest.errorMessages.length > 0 && \"border-red-500 \",\r\n\t\t\t\t\t)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<SelectValue placeholder={placeholder} />\r\n\t\t\t\t</SelectTrigger>\r\n\t\t\t\t<SelectContent>\r\n\t\t\t\t\t{selectOptions?.map((option) => (\r\n\t\t\t\t\t\t<SelectItem key={option} value={option}>\r\n\t\t\t\t\t\t\t{option}\r\n\t\t\t\t\t\t</SelectItem>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</SelectContent>\r\n\t\t\t</Select>\r\n\t\t</FieldWarper>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-form/select.tsx",
      "target": "components/ui/auto-form/select.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { Card, CardContent, CardFooter } from \"@/components/ui/card\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { SwitchInput } from \"zod-auto-form\";\r\n\r\nexport default function AutoFormSwitch({\r\n\tdescription,\r\n\tdisabled,\r\n\terrorMessages,\r\n\tisError,\r\n\tonChange,\r\n\tonBlur,\r\n\ttitle,\r\n\tvalue,\r\n\tid,\r\n\tlabel,\r\n}: SwitchInput) {\r\n\treturn (\r\n\t\t<Card className={cn(isError && \"border-red-500\")}>\r\n\t\t\t<CardContent className=\"flex flex-row items-center justify-between \">\r\n\t\t\t\t<div className=\"space-y-0.5 px-4\">\r\n\t\t\t\t\t<Label htmlFor={id} className={cn(isError && \"text-red-500\")}>\r\n\t\t\t\t\t\t{title || label}\r\n\t\t\t\t\t</Label>\r\n\t\t\t\t\t<p\r\n\t\t\t\t\t\tclassName={cn(\r\n\t\t\t\t\t\t\t\"text-muted-foreground text-xs\",\r\n\t\t\t\t\t\t\tisError && \"text-red-500\",\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{description}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Switch\r\n\t\t\t\t\t\tclassName={cn(isError && \"border-red-500\")}\r\n\t\t\t\t\t\tid={id}\r\n\t\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\t\tchecked={value}\r\n\t\t\t\t\t\tonBlur={onBlur}\r\n\t\t\t\t\t\tonCheckedChange={onChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</CardContent>\r\n\t\t\t{isError && (\r\n\t\t\t\t<CardFooter>\r\n\t\t\t\t\t<p className=\"text-red-500 text-sm\">\r\n\t\t\t\t\t\t{errorMessages.map((error) => error.message).join(\", \")}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</CardFooter>\r\n\t\t\t)}\r\n\t\t</Card>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-form/switch.tsx",
      "target": "components/ui/auto-form/switch.tsx"
    },
    {
      "type": "registry:ui",
      "content": "/* eslint-disable @typescript-eslint/ban-ts-comment */\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Calendar } from \"@/components/ui/calendar\";\r\nimport {\r\n\tDrawer,\r\n\tDrawerClose,\r\n\tDrawerContent,\r\n\tDrawerFooter,\r\n\tDrawerHeader,\r\n\tDrawerTitle,\r\n\tDrawerTrigger,\r\n} from \"@/components/ui/drawer\";\r\nimport {\r\n\tPopover,\r\n\tPopoverContent,\r\n\tPopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport { useIsMobile } from \"@/hooks/use-mobile\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { format } from \"date-fns\";\r\nimport { CalendarClock } from \"lucide-react\";\r\nimport React from \"react\";\r\nimport type { DateTimeInput } from \"zod-auto-form\";\r\nimport FieldWarper from \"./FieldWarper\";\r\nimport { TimePicker } from \"./base-time-picker\";\r\n\r\nexport default function AutoFormDateTimePicker({\r\n\tvalue: date,\r\n\tonChange: setDate,\r\n\tdescription,\r\n\tdisabled,\r\n\terrorMessages,\r\n\tid,\r\n\tisError,\r\n\tlabel,\r\n\tplaceholder,\r\n\ttitle,\r\n}: DateTimeInput) {\r\n\tconst [isOpenMobile, setIsOpenMobile] = React.useState(false);\r\n\tconst [isPopoverOpen, setIsPopoverOpen] = React.useState(false);\r\n    \r\n\tconst [selectedTime, setSelectedTime] = React.useState<{\r\n\t\thours: number;\r\n\t\tminutes: number;\r\n\t}>({\r\n\t\thours: date?.getHours() || 0,\r\n\t\tminutes: date?.getMinutes() || 0,\r\n\t});\r\n\r\n\tconst isMobile = useIsMobile();\r\n\r\n\tconst handleSelect = (selectedDate: Date | undefined) => {\r\n\t\tif (selectedDate) {\r\n\t\t\tconst newDate = new Date(selectedDate);\r\n\t\t\tnewDate.setHours(selectedTime.hours);\r\n\t\t\tnewDate.setMinutes(selectedTime.minutes);\r\n\t\t\tsetDate(newDate);\r\n\t\t} else {\r\n\t\t\t// @ts-ignore\r\n\t\t\tsetDate(undefined);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleTimeChange = (hours: number, minutes: number) => {\r\n\t\tsetSelectedTime({ hours, minutes });\r\n\t\tif (date) {\r\n\t\t\tconst newDate = new Date(date);\r\n\t\t\tnewDate.setHours(hours);\r\n\t\t\tnewDate.setMinutes(minutes);\r\n\t\t\tsetDate(newDate);\r\n\t\t}\r\n\t};\r\n\r\n\tconst DateTimeContent = () => (\r\n\t\t<div className=\"px-4 space-y-4 w-full flex flex-col justify-center items-center\">\r\n\t\t\t<Calendar\r\n\t\t\t\tmode=\"single\"\r\n\t\t\t\tselected={date}\r\n\t\t\t\tonSelect={handleSelect}\r\n\t\t\t\tinitialFocus\r\n\t\t\t\tclassName={cn(\"mx-auto\")}\r\n\t\t\t/>\r\n\t\t\t<div className=\"flex justify-center mb-3\">\r\n\t\t\t\t<TimePicker\r\n\t\t\t\t\thours={selectedTime.hours}\r\n\t\t\t\t\tminutes={selectedTime.minutes}\r\n\t\t\t\t\tonChange={handleTimeChange}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n\r\n\t// Using Button directly instead of a functional component\r\n\tconst triggerButtonContent = (\r\n\t\t<FieldWarper\r\n\t\t\ttitle={title}\r\n\t\t\tlabel={label}\r\n\t\t\terrorMessages={errorMessages}\r\n\t\t\tdescription={description}\r\n\t\t\tid={id}\r\n\t\t>\r\n\t\t\t<Button\r\n\t\t\t\tvariant={\"outline\"}\r\n\t\t\t\ttype=\"button\"\r\n\t\t\t\tonClick={() => setIsPopoverOpen(true)}\r\n\t\t\t\tdisabled={disabled}\r\n\t\t\t\tclassName={cn(\r\n\t\t\t\t\t\"w-full justify-start text-left font-normal \",\r\n\t\t\t\t\t!date && \"text-muted-foreground\",\r\n                    isError && \"border-red-500\"\r\n\t\t\t\t)}\r\n\t\t\t>\r\n\t\t\t\t<CalendarClock className={cn(\"mr-2 h-4 w-4\", isError && \"text-red-500\")} />\r\n\t\t\t\t{date ? format(date, \"PP p\") : <span>{placeholder}</span>}\r\n\t\t\t</Button>\r\n\t\t</FieldWarper>\r\n\t);\r\n\r\n\tif (isMobile) {\r\n\t\treturn (\r\n\t\t\t<Drawer open={isOpenMobile} onOpenChange={setIsOpenMobile}>\r\n\t\t\t\t<DrawerTrigger>{triggerButtonContent}</DrawerTrigger>\r\n\t\t\t\t<DrawerContent>\r\n\t\t\t\t\t<DrawerHeader className=\"text-center\">\r\n\t\t\t\t\t\t<DrawerTitle>Select Date and Time</DrawerTitle>\r\n\t\t\t\t\t</DrawerHeader>\r\n\t\t\t\t\t<DateTimeContent />\r\n\t\t\t\t\t<DrawerFooter className=\"pt-2\">\r\n\t\t\t\t\t\t<DrawerClose asChild>\r\n\t\t\t\t\t\t\t<Button variant=\"default\" className=\"w-full\">\r\n\t\t\t\t\t\t\t\tDone\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</DrawerClose>\r\n\t\t\t\t\t</DrawerFooter>\r\n\t\t\t\t</DrawerContent>\r\n\t\t\t</Drawer>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>\r\n\t\t\t<PopoverTrigger >{triggerButtonContent}</PopoverTrigger>\r\n\t\t\t<PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n\t\t\t\t<DateTimeContent />\r\n\t\t\t</PopoverContent>\r\n\t\t</Popover>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-form/date-time-picker.tsx",
      "target": "components/ui/auto-form/date-time-picker.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport type { GroupedFieldsWrapper } from \"zod-auto-form\";\r\nexport default function AutoFormGroupedFieldsWrapper({\r\n\tchildren,\r\n\tgroupName,\r\n}: GroupedFieldsWrapper) {\r\n\tif (groupName === \"other\") {\r\n\t\treturn <>{children}</>;\r\n\t}\r\n\treturn (\r\n\t\t<Card>\r\n\t\t\t<CardHeader>\r\n\t\t\t\t<CardTitle>{groupName}</CardTitle>\r\n\t\t\t</CardHeader>\r\n\t\t\t<CardContent>{children}</CardContent>\r\n\t\t</Card>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-form/AutoFormGroupedFieldsWrapper.tsx",
      "target": "components/ui/auto-form/AutoFormGroupedFieldsWrapper.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { Button } from \"@/components/ui/button\";\r\nimport {\r\n\tCard,\r\n\tCardContent,\r\n\tCardDescription,\r\n\tCardFooter,\r\n\tCardHeader,\r\n\tCardTitle,\r\n} from \"@/components/ui/card\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { X } from \"lucide-react\";\r\n\r\nimport type { ArrayWrapper } from \"zod-auto-form\";\r\nexport default function AutoFormArrayWrapper({\r\n\tchildren,\r\n\tonAddField,\r\n\tonRemoveField,\r\n\tdescription,\r\n\tlabel,\r\n\ttitle,\r\n}: ArrayWrapper) {\r\n\treturn (\r\n\t\t<Card>\r\n\t\t\t<CardHeader>\r\n\t\t\t\t<CardTitle>{title || label}</CardTitle>\r\n\t\t\t\t<CardDescription>{description}</CardDescription>\r\n\t\t\t</CardHeader>\r\n\t\t\t<CardContent>\r\n\t\t\t\t<div className=\"flex flex-col gap-2\">\r\n\t\t\t\t\t{children.map((child, index) => (\r\n\t\t\t\t\t\t<div key={index.toString()} className=\"flex flex-col gap-2\">\r\n\t\t\t\t\t\t\t{child}\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"destructive\"\r\n\t\t\t\t\t\t\t\tonClick={() => onRemoveField(index)}\r\n\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\tsize=\"icon\"\r\n\t\t\t\t\t\t\t\tclassName=\"self-end\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<X />\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Separator className=\"my-2 h-3\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</CardContent>\r\n\t\t\t<CardFooter>\r\n\t\t\t\t<Button type=\"button\" onClick={onAddField}>\r\n\t\t\t\t\tAdd\r\n\t\t\t\t</Button>\r\n\t\t\t</CardFooter>\r\n\t\t</Card>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-form/AutoFormArrayWrapper.tsx",
      "target": "components/ui/auto-form/AutoFormArrayWrapper.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import {\r\n\tCard,\r\n\tCardContent,\r\n\tCardDescription,\r\n\tCardHeader,\r\n\tCardTitle,\r\n} from \"@/components/ui/card\";\r\nimport type { ObjectWrapper } from \"zod-auto-form\";\r\n\r\nexport default function AutoFormObjectWrapper({\r\n\tchildren,\r\n\tdescription,\r\n\tlabel,\r\n\ttitle,\r\n}: ObjectWrapper) {\r\n\treturn (\r\n\t\t<Card>\r\n\t\t\t<CardHeader>\r\n\t\t\t\t<CardTitle>{title || label}</CardTitle>\r\n\t\t\t\t<CardDescription>{description}</CardDescription>\r\n\t\t\t</CardHeader>\r\n\t\t\t<CardContent className=\"flex flex-col gap-4\">{children}</CardContent>\r\n\t\t</Card>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-form/AutoFormObjectWrapper.tsx",
      "target": "components/ui/auto-form/AutoFormObjectWrapper.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import type { FormComponent } from \"zod-auto-form\";\r\n\r\nexport default function AutoFormComponent({\r\n\tchildren,\r\n\tonSubmit,\r\n\tformId,\r\n}: FormComponent) {\r\n\treturn (\r\n\t\t<form className=\"flex flex-col gap-4\" onSubmit={onSubmit} id={formId}>\r\n\t\t\t{children}\r\n\t\t</form>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-form/form.tsx",
      "target": "components/ui/auto-form/form.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { cn } from \"@/lib/utils\";\r\nimport type { MultiSelectInput } from \"zod-auto-form\";\r\nimport FieldWarper from \"./FieldWarper\";\r\nimport { MultiSelect } from \"./base-multi-select\";\r\n\r\nexport default function AutoFormMultiSelect({\r\n\tselectOptions,\r\n\tplaceholder,\r\n\tdisabled,\r\n\tonChange,\r\n\tonBlur,\r\n\ttitle,\r\n\tvalue,\r\n\t...rest\r\n}: MultiSelectInput) {\r\n\tif (!selectOptions) return null;\r\n\treturn (\r\n\t\t<FieldWarper title={title} {...rest}>\r\n\t\t\t<MultiSelect\r\n\t\t\t\tclassName={cn(rest.errorMessages.length > 0 && \"border-red-500\")}\r\n\t\t\t\toptions={selectOptions.map((option) => ({\r\n\t\t\t\t\tlabel: option,\r\n\t\t\t\t\tvalue: option,\r\n\t\t\t\t}))}\r\n\t\t\t\tid={rest.id}\r\n\t\t\t\tonBlur={onBlur}\r\n\t\t\t\tonValueChange={onChange}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tdisabled={disabled}\r\n\t\t\t\tvalue={value}\r\n\t\t\t/>\r\n\t\t</FieldWarper>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-form/multi-select.tsx",
      "target": "components/ui/auto-form/multi-select.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { Input } from \"@/components/ui/input\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { NumberInput } from \"zod-auto-form\";\r\nimport FieldWarper from \"./FieldWarper\";\r\n\r\nexport default function AutoFormNumberInput({\r\n\tonBlur,\r\n\tonChange,\r\n\tplaceholder,\r\n\ttitle,\r\n\tvalue,\r\n\t...rest\r\n}: NumberInput) {\r\n\treturn (\r\n\t\t<FieldWarper title={title} {...rest}>\r\n\t\t\t<Input\r\n\t\t\t\tid={rest.id}\r\n\t\t\t\tclassName={cn(rest.errorMessages.length > 0 && \"border-red-500\")}\r\n\t\t\t\ttype=\"number\"\r\n\t\t\t\tonBlur={onBlur}\r\n\t\t\t\tonChange={(e) => onChange(Number(e.target.value))}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tvalue={value === 0 ? \"\" : value}\r\n\t\t\t/>\r\n\t\t</FieldWarper>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-form/number-input.tsx",
      "target": "components/ui/auto-form/number-input.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { type VariantProps, cva } from \"class-variance-authority\";\nimport {\n\tCheckIcon,\n\tChevronDown,\n\tWandSparkles,\n\tXCircle,\n\tXIcon,\n} from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tCommand,\n\tCommandEmpty,\n\tCommandGroup,\n\tCommandInput,\n\tCommandItem,\n\tCommandList,\n\tCommandSeparator,\n} from \"@/components/ui/command\";\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { cn } from \"@/lib/utils\";\n\n/**\n * Variants for the multi-select component to handle different styles.\n * Uses class-variance-authority (cva) to define different styles based on \"variant\" prop.\n */\nconst multiSelectVariants = cva(\n\t\"hover:-translate-y-1 m-1 transition delay-150 duration-300 ease-in-out hover:scale-110\",\n\t{\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tdefault:\n\t\t\t\t\t\"border-foreground/10 bg-card text-foreground hover:bg-card/80\",\n\t\t\t\tsecondary:\n\t\t\t\t\t\"border-foreground/10 bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n\t\t\t\tdestructive:\n\t\t\t\t\t\"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n\t\t\t\tinverted: \"inverted\",\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: \"default\",\n\t\t},\n\t},\n);\n\n/**\n * Props for MultiSelect component\n */\ninterface MultiSelectProps\n\textends React.ButtonHTMLAttributes<HTMLButtonElement>,\n\t\tVariantProps<typeof multiSelectVariants> {\n\t/**\n\t * An array of option objects to be displayed in the multi-select component.\n\t * Each option object has a label, value, and an optional icon.\n\t */\n\toptions: {\n\t\t/** The text to display for the option. */\n\t\tlabel: string;\n\t\t/** The unique value associated with the option. */\n\t\tvalue: string;\n\t\t/** Optional icon component to display alongside the option. */\n\t\ticon?: React.ComponentType<{ className?: string }>;\n\t}[];\n\n\t/**\n\t * Callback function triggered when the selected values change.\n\t * Receives an array of the new selected values.\n\t */\n\tonValueChange: (value: string[]) => void;\n\n\t/** The default selected values when the component mounts. */\n\tdefaultValue?: string[];\n\n\t/**\n\t * Placeholder text to be displayed when no values are selected.\n\t * Optional, defaults to \"Select options\".\n\t */\n\tplaceholder?: string;\n\n\t/**\n\t * Animation duration in seconds for the visual effects (e.g., bouncing badges).\n\t * Optional, defaults to 0 (no animation).\n\t */\n\tanimation?: number;\n\n\t/**\n\t * Maximum number of items to display. Extra selected items will be summarized.\n\t * Optional, defaults to 3.\n\t */\n\tmaxCount?: number;\n\n\t/**\n\t * The modality of the popover. When set to true, interaction with outside elements\n\t * will be disabled and only popover content will be visible to screen readers.\n\t * Optional, defaults to false.\n\t */\n\tmodalPopover?: boolean;\n\n\t/**\n\t * If true, renders the multi-select component as a child of another component.\n\t * Optional, defaults to false.\n\t */\n\tasChild?: boolean;\n\n\t/**\n\t * Additional class names to apply custom styles to the multi-select component.\n\t * Optional, can be used to add custom styles.\n\t */\n\tclassName?: string;\n}\n\nexport const MultiSelect = React.forwardRef<\n\tHTMLButtonElement,\n\tMultiSelectProps\n>(\n\t(\n\t\t{\n\t\t\toptions,\n\t\t\tonValueChange,\n\t\t\tvariant,\n\t\t\tdefaultValue = [],\n\t\t\tplaceholder = \"Select options\",\n\t\t\tanimation = 0,\n\t\t\tmaxCount = 3,\n\t\t\tmodalPopover = false,\n\t\t\tasChild = false,\n\t\t\tclassName,\n\t\t\t...props\n\t\t},\n\t\tref,\n\t) => {\n\t\tconst [selectedValues, setSelectedValues] =\n\t\t\tReact.useState<string[]>(defaultValue);\n\t\tconst [isPopoverOpen, setIsPopoverOpen] = React.useState(false);\n\t\tconst [isAnimating, setIsAnimating] = React.useState(false);\n\n\t\tconst handleInputKeyDown = (\n\t\t\tevent: React.KeyboardEvent<HTMLInputElement>,\n\t\t) => {\n\t\t\tif (event.key === \"Enter\") {\n\t\t\t\tsetIsPopoverOpen(true);\n\t\t\t} else if (event.key === \"Backspace\" && !event.currentTarget.value) {\n\t\t\t\tconst newSelectedValues = [...selectedValues];\n\t\t\t\tnewSelectedValues.pop();\n\t\t\t\tsetSelectedValues(newSelectedValues);\n\t\t\t\tonValueChange(newSelectedValues);\n\t\t\t}\n\t\t};\n\n\t\tconst toggleOption = (option: string) => {\n\t\t\tconst newSelectedValues = selectedValues.includes(option)\n\t\t\t\t? selectedValues.filter((value) => value !== option)\n\t\t\t\t: [...selectedValues, option];\n\t\t\tsetSelectedValues(newSelectedValues);\n\t\t\tonValueChange(newSelectedValues);\n\t\t};\n\n\t\tconst handleClear = () => {\n\t\t\tsetSelectedValues([]);\n\t\t\tonValueChange([]);\n\t\t};\n\n\t\tconst handleTogglePopover = () => {\n\t\t\tsetIsPopoverOpen((prev) => !prev);\n\t\t};\n\n\t\tconst clearExtraOptions = () => {\n\t\t\tconst newSelectedValues = selectedValues.slice(0, maxCount);\n\t\t\tsetSelectedValues(newSelectedValues);\n\t\t\tonValueChange(newSelectedValues);\n\t\t};\n\n\t\tconst toggleAll = () => {\n\t\t\tif (selectedValues.length === options.length) {\n\t\t\t\thandleClear();\n\t\t\t} else {\n\t\t\t\tconst allValues = options.map((option) => option.value);\n\t\t\t\tsetSelectedValues(allValues);\n\t\t\t\tonValueChange(allValues);\n\t\t\t}\n\t\t};\n\n\t\treturn (\n\t\t\t<Popover\n\t\t\t\topen={isPopoverOpen}\n\t\t\t\tonOpenChange={setIsPopoverOpen}\n\t\t\t\tmodal={modalPopover}\n\t\t\t>\n\t\t\t\t<PopoverTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t\tonClick={handleTogglePopover}\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"flex h-auto min-h-10 w-full items-center justify-between rounded-md border bg-inherit p-1 hover:bg-inherit [&_svg]:pointer-events-auto\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{selectedValues.length > 0 ? (\n\t\t\t\t\t\t\t<div className=\"flex w-full items-center justify-between\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap items-center\">\n\t\t\t\t\t\t\t\t\t{selectedValues.slice(0, maxCount).map((value) => {\n\t\t\t\t\t\t\t\t\t\tconst option = options.find((o) => o.value === value);\n\t\t\t\t\t\t\t\t\t\tconst IconComponent = option?.icon;\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<Badge\n\t\t\t\t\t\t\t\t\t\t\t\tkey={value}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\t\t\tisAnimating ? \"animate-bounce\" : \"\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tmultiSelectVariants({ variant }),\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ animationDuration: `${animation}s` }}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{IconComponent && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<IconComponent className=\"mr-2 h-4 w-4\" />\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t{option?.label}\n\t\t\t\t\t\t\t\t\t\t\t\t<XCircle\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"ml-2 h-4 w-4 cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoggleOption(value);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t{selectedValues.length > maxCount && (\n\t\t\t\t\t\t\t\t\t\t<Badge\n\t\t\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\t\t\"border-foreground/1 bg-transparent text-foreground hover:bg-transparent\",\n\t\t\t\t\t\t\t\t\t\t\t\tisAnimating ? \"animate-bounce\" : \"\",\n\t\t\t\t\t\t\t\t\t\t\t\tmultiSelectVariants({ variant }),\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ animationDuration: `${animation}s` }}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{`+ ${selectedValues.length - maxCount} more`}\n\t\t\t\t\t\t\t\t\t\t\t<XCircle\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"ml-2 h-4 w-4 cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={(event) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t\t\t\t\t\t\t\tclearExtraOptions();\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center justify-between\">\n\t\t\t\t\t\t\t\t\t<XIcon\n\t\t\t\t\t\t\t\t\t\tclassName=\"mx-2 h-4 cursor-pointer text-muted-foreground\"\n\t\t\t\t\t\t\t\t\t\tonClick={(event) => {\n\t\t\t\t\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t\t\t\t\t\thandleClear();\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Separator\n\t\t\t\t\t\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex h-full min-h-6\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<ChevronDown className=\"mx-2 h-4 cursor-pointer text-muted-foreground\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"mx-auto flex w-full items-center justify-between\">\n\t\t\t\t\t\t\t\t<span className=\"mx-3 text-muted-foreground text-sm\">\n\t\t\t\t\t\t\t\t\t{placeholder}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<ChevronDown className=\"mx-2 h-4 cursor-pointer text-muted-foreground\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Button>\n\t\t\t\t</PopoverTrigger>\n\t\t\t\t<PopoverContent\n\t\t\t\t\tclassName=\"w-auto p-0\"\n\t\t\t\t\talign=\"start\"\n\t\t\t\t\tonEscapeKeyDown={() => setIsPopoverOpen(false)}\n\t\t\t\t>\n\t\t\t\t\t<Command>\n\t\t\t\t\t\t<CommandInput\n\t\t\t\t\t\t\tplaceholder=\"Search...\"\n\t\t\t\t\t\t\tonKeyDown={handleInputKeyDown}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<CommandList>\n\t\t\t\t\t\t\t<CommandEmpty>No results found.</CommandEmpty>\n\t\t\t\t\t\t\t<CommandGroup>\n\t\t\t\t\t\t\t\t<CommandItem\n\t\t\t\t\t\t\t\t\tkey=\"all\"\n\t\t\t\t\t\t\t\t\tonSelect={toggleAll}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\t\"mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary\",\n\t\t\t\t\t\t\t\t\t\t\tselectedValues.length === options.length\n\t\t\t\t\t\t\t\t\t\t\t\t? \"bg-primary text-primary-foreground\"\n\t\t\t\t\t\t\t\t\t\t\t\t: \"opacity-50 [&_svg]:invisible\",\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<CheckIcon className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<span>(Select All)</span>\n\t\t\t\t\t\t\t\t</CommandItem>\n\t\t\t\t\t\t\t\t{options.map((option) => {\n\t\t\t\t\t\t\t\t\tconst isSelected = selectedValues.includes(option.value);\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<CommandItem\n\t\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\t\tonSelect={() => toggleOption(option.value)}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tisSelected\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"bg-primary text-primary-foreground\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"opacity-50 [&_svg]:invisible\",\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<CheckIcon className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t{option.icon && (\n\t\t\t\t\t\t\t\t\t\t\t\t<option.icon className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t<span>{option.label}</span>\n\t\t\t\t\t\t\t\t\t\t</CommandItem>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</CommandGroup>\n\t\t\t\t\t\t\t<CommandSeparator />\n\t\t\t\t\t\t\t<CommandGroup>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center justify-between\">\n\t\t\t\t\t\t\t\t\t{selectedValues.length > 0 && (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t<CommandItem\n\t\t\t\t\t\t\t\t\t\t\t\tonSelect={handleClear}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex-1 cursor-pointer justify-center\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\tClear\n\t\t\t\t\t\t\t\t\t\t\t</CommandItem>\n\t\t\t\t\t\t\t\t\t\t\t<Separator\n\t\t\t\t\t\t\t\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex h-full min-h-6\"\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t<CommandItem\n\t\t\t\t\t\t\t\t\t\tonSelect={() => setIsPopoverOpen(false)}\n\t\t\t\t\t\t\t\t\t\tclassName=\"max-w-full flex-1 cursor-pointer justify-center\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t\t\t</CommandItem>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</CommandGroup>\n\t\t\t\t\t\t</CommandList>\n\t\t\t\t\t</Command>\n\t\t\t\t</PopoverContent>\n\t\t\t\t{animation > 0 && selectedValues.length > 0 && (\n\t\t\t\t\t<WandSparkles\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"my-2 h-3 w-3 cursor-pointer bg-background text-foreground\",\n\t\t\t\t\t\t\tisAnimating ? \"\" : \"text-muted-foreground\",\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={() => setIsAnimating(!isAnimating)}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</Popover>\n\t\t);\n\t},\n);\n\nMultiSelect.displayName = \"MultiSelect\";\n",
      "path": "ui/auto-form/base-multi-select.tsx",
      "target": "components/ui/auto-form/base-multi-select.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import {\r\n\tSelect,\r\n\tSelectContent,\r\n\tSelectItem,\r\n\tSelectTrigger,\r\n\tSelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { Clock } from \"lucide-react\";\r\n\r\ninterface TimePickerProps {\r\n\thours: number;\r\n\tminutes: number;\r\n\tonChange: (hours: number, minutes: number) => void;\r\n}\r\n\r\nexport function TimePicker({ hours, minutes, onChange }: TimePickerProps) {\r\n\t// Convert 24-hour format to 12-hour format for display\r\n\tconst displayHour = hours % 12 === 0 ? 12 : hours % 12;\r\n\tconst period = hours >= 12 ? \"PM\" : \"AM\";\r\n\r\n\tconst handleHourChange = (value: string) => {\r\n\t\t// Convert selected 12-hour format to 24-hour format\r\n\t\tconst selectedHour = Number.parseInt(value);\r\n\t\tconst newHour =\r\n\t\t\tperiod === \"PM\"\r\n\t\t\t\t? selectedHour === 12\r\n\t\t\t\t\t? 12\r\n\t\t\t\t\t: selectedHour + 12\r\n\t\t\t\t: selectedHour === 12\r\n\t\t\t\t\t? 0\r\n\t\t\t\t\t: selectedHour;\r\n\t\tonChange(newHour, minutes);\r\n\t};\r\n\r\n\tconst handlePeriodChange = (value: string) => {\r\n\t\t// Adjust hours based on AM/PM selection\r\n\t\tconst newHour =\r\n\t\t\tvalue === \"PM\"\r\n\t\t\t\t? hours >= 12\r\n\t\t\t\t\t? hours\r\n\t\t\t\t\t: hours + 12\r\n\t\t\t\t: hours >= 12\r\n\t\t\t\t\t? hours - 12\r\n\t\t\t\t\t: hours;\r\n\t\tonChange(newHour, minutes);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"flex items-center gap-2\">\r\n\t\t\t<Clock className=\"h-4 w-4 text-muted-foreground\" />\r\n\t\t\t<div className=\"flex items-center gap-2 flex-wrap justify-center\">\r\n\t\t\t\t<Select value={displayHour.toString()} onValueChange={handleHourChange}>\r\n\t\t\t\t\t<SelectTrigger className=\"w-[70px]\">\r\n\t\t\t\t\t\t<SelectValue placeholder=\"Hours\" />\r\n\t\t\t\t\t</SelectTrigger>\r\n\t\t\t\t\t<SelectContent className=\"max-h-[200px]\">\r\n\t\t\t\t\t\t{Array.from({ length: 12 }).map((_, i) => {\r\n\t\t\t\t\t\t\tconst hour = i + 1; // 1-12 for 12-hour format\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<SelectItem key={hour} value={hour.toString()}>\r\n\t\t\t\t\t\t\t\t\t{hour.toString().padStart(2, \"0\")}\r\n\t\t\t\t\t\t\t\t</SelectItem>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</SelectContent>\r\n\t\t\t\t</Select>\r\n\t\t\t\t<span className=\"text-muted-foreground\">:</span>\r\n\t\t\t\t<Select\r\n\t\t\t\t\tvalue={minutes.toString()}\r\n\t\t\t\t\tonValueChange={(value) => onChange(hours, Number.parseInt(value))}\r\n\t\t\t\t>\r\n\t\t\t\t\t<SelectTrigger className=\"w-[70px]\">\r\n\t\t\t\t\t\t<SelectValue placeholder=\"Minutes\" />\r\n\t\t\t\t\t</SelectTrigger>\r\n\t\t\t\t\t<SelectContent className=\"max-h-[200px]\">\r\n\t\t\t\t\t\t{Array.from({ length: 60 }).map((_, i) => (\r\n\t\t\t\t\t\t\t<SelectItem key={i.toString()} value={i.toString()}>\r\n\t\t\t\t\t\t\t\t{i.toString().padStart(2, \"0\")}\r\n\t\t\t\t\t\t\t</SelectItem>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</SelectContent>\r\n\t\t\t\t</Select>\r\n\t\t\t\t<Select value={period} onValueChange={handlePeriodChange}>\r\n\t\t\t\t\t<SelectTrigger className=\"w-[70px]\">\r\n\t\t\t\t\t\t<SelectValue placeholder=\"AM/PM\" />\r\n\t\t\t\t\t</SelectTrigger>\r\n\t\t\t\t\t<SelectContent>\r\n\t\t\t\t\t\t<SelectItem value=\"AM\">AM</SelectItem>\r\n\t\t\t\t\t\t<SelectItem value=\"PM\">PM</SelectItem>\r\n\t\t\t\t\t</SelectContent>\r\n\t\t\t\t</Select>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-form/base-time-picker.tsx",
      "target": "components/ui/auto-form/base-time-picker.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { ComponentRegistry } from \"zod-auto-form\";\r\nimport AutoFormArrayWrapper from \"./AutoFormArrayWrapper\";\r\nimport AutoFormGroupedFieldsWrapper from \"./AutoFormGroupedFieldsWrapper\";\r\nimport AutoFormObjectWrapper from \"./AutoFormObjectWrapper\";\r\nimport AutoFormButton from \"./button\";\r\nimport AutoFormCheckboxV1 from \"./checkbox_ui_1\";\r\nimport AutoFormCheckboxV2 from \"./checkbox_ui_2\";\r\nimport AutoFormDateTimePicker from \"./date-time-picker\";\r\nimport AutoFormComponent from \"./form\";\r\nimport AutoFormInput from \"./input\";\r\nimport AutoFormMultiSelect from \"./multi-select\";\r\nimport AutoFormNumberInput from \"./number-input\";\r\nimport AutoFormRadioGroup from \"./radio-group\";\r\nimport AutoFormSelect from \"./select\";\r\nimport AutoFormSwitch from \"./switch\";\r\nimport AutoFormTextArea from \"./textarea\";\r\nconst componentRegistry = ComponentRegistry({\r\n\tInput: AutoFormInput,\r\n\tSubmitButton: AutoFormButton,\r\n\tForm: AutoFormComponent,\r\n\tNumberInput: AutoFormNumberInput,\r\n\tSelect: AutoFormSelect,\r\n\tTextArea: AutoFormTextArea,\r\n\tMultiSelect: AutoFormMultiSelect,\r\n\tCheckbox: AutoFormCheckboxV1,\r\n\tRadioGroup: AutoFormRadioGroup,\r\n\tSwitch: AutoFormSwitch,\r\n\tDateTimePicker: AutoFormDateTimePicker,\r\n\tObjectWrapper: AutoFormObjectWrapper,\r\n\tArrayWrapper: AutoFormArrayWrapper,\r\n\tGroupedFieldsWrapper: AutoFormGroupedFieldsWrapper,\r\n});\r\n\r\nexport default componentRegistry;\r\n",
      "path": "ui/auto-form/index.tsx",
      "target": "components/ui/auto-form/index.tsx"
    }
  ]
}