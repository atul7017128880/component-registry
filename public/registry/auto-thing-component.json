{
  "name": "auto-thing-component",
  "type": "registry:block",
  "registryDependencies": [
    "button",
    "card",
    "separator",
    "popover",
    "drawer",
    "sidebar",
    "badge",
    "tooltip",
    "dialog",
    "alert-dialog",
    "accordion",
    "input"
  ],
  "dependencies": [
    "auto-thing-zod"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "import { AutoThingComponentRegistryHelper } from \"auto-thing-zod\";\r\nimport ActionButtonWrapper from \"./ActionButtonWrapper\";\r\nimport CreateModal from \"./CreateModal\";\r\nimport DeleteButtonDetails from \"./DeleteButtonDetails\";\r\nimport DeleteModal from \"./DeleteModal\";\r\nimport EditButtonDetails from \"./EditButtonDetails\";\r\nimport EditModal from \"./EditModal\";\r\nimport SearchFilterWrapper from \"./SearchFilterWrapper\";\r\nimport TableWrapperCard from \"./TableWrapperCard\";\r\nimport ViewButtonDetails from \"./ViewButtonDetails\";\r\nimport ViewModal from \"./ViewModal\";\r\n\r\nexport const AutoThingComponents = AutoThingComponentRegistryHelper({\r\n\tActionButtonWrapper,\r\n\tViewButtonDetails,\r\n\tEditButtonDetails,\r\n\tDeleteButtonDetails,\r\n\tEditModal,\r\n\tViewModal,\r\n\tDeleteModal,\r\n\tTableWrapperCard,\r\n\tCreateModal,\r\n\tSearchFilterWrapper,\r\n});\r\n",
      "path": "ui/auto-thing/index.tsx",
      "target": "components/ui/auto-thing/index.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import type { ActionButtonWrapperType } from \"./types\";\r\n\r\nexport default function AutoThingActionButtonWrapper({\r\n\tchildren,\r\n}: ActionButtonWrapperType) {\r\n\treturn <div className=\"flex gap-2\">{children}</div>;\r\n}\r\n",
      "path": "ui/auto-thing/ActionButtonWrapper.tsx",
      "target": "components/ui/auto-thing/ActionButtonWrapper.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { Button } from \"@/components/ui/button\";\r\nimport { Loader2 } from \"lucide-react\";\r\nimport {\r\n\tResponsiveModal,\r\n\tResponsiveModalBody,\r\n\tResponsiveModalContent,\r\n\tResponsiveModalDescription,\r\n\tResponsiveModalFooter,\r\n\tResponsiveModalHeader,\r\n\tResponsiveModalTitle,\r\n} from \"./ResponsiveModal\";\r\nimport type { CreateModalType } from \"./types\";\r\nexport default function AutoThingCreateModal({\r\n\topen,\r\n\tonClose,\r\n\tchildren,\r\n\r\n\tformId,\r\n\tisLoading,\r\n}: CreateModalType) {\r\n\treturn (\r\n\t\t<ResponsiveModal open={open} onOpenChange={onClose}>\r\n\t\t\t<ResponsiveModalContent>\r\n\t\t\t\t<ResponsiveModalHeader>\r\n\t\t\t\t\t<ResponsiveModalTitle>\r\n\t\t\t\t\t\t{/* @ts-ignore */}\r\n\t\t\t\t\t\tCreate\r\n\t\t\t\t\t</ResponsiveModalTitle>\r\n\t\t\t\t\t<ResponsiveModalDescription>\r\n\t\t\t\t\t\tCreate the details of row\r\n\t\t\t\t\t</ResponsiveModalDescription>\r\n\t\t\t\t</ResponsiveModalHeader>\r\n\t\t\t\t<ResponsiveModalBody className=\"max-h-[80vh] overflow-scroll py-5\">\r\n\t\t\t\t\t{children}\r\n\t\t\t\t</ResponsiveModalBody>\r\n\t\t\t\t<ResponsiveModalFooter>\r\n\t\t\t\t\t<Button onClick={onClose} variant=\"outline\">\r\n\t\t\t\t\t\tClose\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button form={formId} type=\"submit\">\r\n\t\t\t\t\t\t{isLoading ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : \"Save\"}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</ResponsiveModalFooter>\r\n\t\t\t</ResponsiveModalContent>\r\n\t\t</ResponsiveModal>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-thing/CreateModal.tsx",
      "target": "components/ui/auto-thing/CreateModal.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { Trash2 } from \"lucide-react\";\r\nimport type { ActionButtonType } from \"./types\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\nexport default function AutoThingDeleteButtonDetails({\r\n\trow,\r\n\topenModal,\r\n}: ActionButtonType) {\r\n\treturn (\r\n\t\t<Button variant=\"outline\" size=\"icon\" onClick={openModal}>\r\n\t\t\t<Trash2 className=\"h-4 w-4\" />\r\n\t\t</Button>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-thing/DeleteButtonDetails.tsx",
      "target": "components/ui/auto-thing/DeleteButtonDetails.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import {\r\n\tAlertDialog,\r\n\tAlertDialogCancel,\r\n\tAlertDialogContent,\r\n\tAlertDialogDescription,\r\n\tAlertDialogFooter,\r\n\tAlertDialogHeader,\r\n\tAlertDialogTitle,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Loader2, Trash2 } from \"lucide-react\";\r\nimport { useState } from \"react\";\r\nimport { DescriptionList } from \"./DescriptionList\";\r\nimport type { DeleteModalType } from \"./types\";\r\n\r\nexport default function AutoThingDeleteModal({\r\n\tonClose,\r\n\tonDelete,\r\n\topen,\r\n\trow,\r\n}: DeleteModalType) {\r\n\tconst [isDeleting, setIsDeleting] = useState(false);\r\n\r\n\tconst handleDelete = async () => {\r\n\t\ttry {\r\n\t\t\tsetIsDeleting(true);\r\n\t\t\tawait onDelete();\r\n\t\t\t// Only close after successful deletion\r\n\t\t\tonClose();\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Delete operation failed:\", error);\r\n\t\t} finally {\r\n\t\t\tsetIsDeleting(false);\r\n\t\t}\r\n\t};\r\n\r\n\t// Handle when user attempts to close modal\r\n\tconst handleOpenChange = (isOpen: boolean) => {\r\n\t\t// If user is trying to close the modal (isOpen is false)\r\n\t\t// and we're not in the middle of deleting, allow it\r\n\t\tif (!isOpen && !isDeleting) {\r\n\t\t\tonClose();\r\n\t\t}\r\n\t\t// Otherwise, if we're deleting, prevent closing\r\n\t};\r\n\r\n\t// Extract displayable info from row\r\n\r\n\treturn (\r\n\t\t<AlertDialog open={open} onOpenChange={handleOpenChange}>\r\n\t\t\t<AlertDialogContent className=\"max-w-md\">\r\n\t\t\t\t<AlertDialogHeader>\r\n\t\t\t\t\t<div className=\"flex items-center gap-3\">\r\n\t\t\t\t\t\t<div className=\"rounded-full bg-destructive/15 p-2\">\r\n\t\t\t\t\t\t\t<Trash2 className=\"h-5 w-5 text-destructive\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<AlertDialogTitle>Delete Confirmation</AlertDialogTitle>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<AlertDialogDescription>\r\n\t\t\t\t\t\tAre you sure you want to delete this item? This action cannot be\r\n\t\t\t\t\t\tundone and all associated data will be permanently removed.\r\n\t\t\t\t\t</AlertDialogDescription>\r\n\t\t\t\t</AlertDialogHeader>\r\n\t\t\t\t<div className=\"h-[40vh] overflow-scroll\">\r\n\t\t\t\t\t<DescriptionList\r\n\t\t\t\t\t\ttitle=\"Row Details\"\r\n\t\t\t\t\t\tdata={row as Record<string, unknown>}\r\n\t\t\t\t\t\tclassName=\"mt-4\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* {getRowDetails()} */}\r\n\r\n\t\t\t\t<AlertDialogFooter>\r\n\t\t\t\t\t<AlertDialogCancel\r\n\t\t\t\t\t\tonClick={() => !isDeleting && onClose()}\r\n\t\t\t\t\t\tclassName=\"border-input hover:bg-muted\"\r\n\t\t\t\t\t\tdisabled={isDeleting}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tCancel\r\n\t\t\t\t\t</AlertDialogCancel>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tonClick={handleDelete}\r\n\t\t\t\t\t\tclassName=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\r\n\t\t\t\t\t\tdisabled={isDeleting}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{isDeleting ? (\r\n\t\t\t\t\t\t\t<Loader2 className=\"h-4 w-4 animate-spin\" />\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\"Delete\"\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</AlertDialogFooter>\r\n\t\t\t</AlertDialogContent>\r\n\t\t</AlertDialog>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-thing/DeleteModal.tsx",
      "target": "components/ui/auto-thing/DeleteModal.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { Pencil } from \"lucide-react\";\r\nimport type { ActionButtonType } from \"./types\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\nexport default function AutoThingEditButtonDetails({\r\n\trow,\r\n\topenModal,\r\n}: ActionButtonType) {\r\n\treturn (\r\n\t\t<Button variant=\"outline\" size=\"icon\" onClick={openModal}>\r\n\t\t\t<Pencil className=\"h-4 w-4\" />\r\n\t\t</Button>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-thing/EditButtonDetails.tsx",
      "target": "components/ui/auto-thing/EditButtonDetails.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { Button } from \"@/components/ui/button\";\r\nimport { Loader2 } from \"lucide-react\";\r\nimport {\r\n\tResponsiveModal,\r\n\tResponsiveModalBody,\r\n\tResponsiveModalContent,\r\n\tResponsiveModalDescription,\r\n\tResponsiveModalFooter,\r\n\tResponsiveModalHeader,\r\n\tResponsiveModalTitle,\r\n} from \"./ResponsiveModal\";\r\nimport type { EditModalType } from \"./types\";\r\nexport default function AutoThingEditModal({\r\n\topen,\r\n\tonClose,\r\n\tchildren,\r\n\trow,\r\n\tformId,\r\n\tisLoading,\r\n}: EditModalType) {\r\n\treturn (\r\n\t\t<ResponsiveModal open={open} onOpenChange={onClose}>\r\n\t\t\t<ResponsiveModalContent>\r\n\t\t\t\t<ResponsiveModalHeader>\r\n\t\t\t\t\t<ResponsiveModalTitle>\r\n\t\t\t\t\t\t{/* @ts-ignore */}\r\n\t\t\t\t\t\tEdit : {row?.name ?? row?.id ?? row?.email}\r\n\t\t\t\t\t</ResponsiveModalTitle>\r\n\t\t\t\t\t<ResponsiveModalDescription>\r\n\t\t\t\t\t\tEdit the details of Row\r\n\t\t\t\t\t</ResponsiveModalDescription>\r\n\t\t\t\t</ResponsiveModalHeader>\r\n\t\t\t\t<ResponsiveModalBody className=\"max-h-[80vh] overflow-scroll py-5\">\r\n\t\t\t\t\t{children}\r\n\t\t\t\t</ResponsiveModalBody>\r\n\t\t\t\t<ResponsiveModalFooter>\r\n\t\t\t\t\t<Button onClick={onClose} variant=\"outline\">\r\n\t\t\t\t\t\tClose\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button form={formId} type=\"submit\">\r\n\t\t\t\t\t\t{isLoading ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : \"Save\"}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</ResponsiveModalFooter>\r\n\t\t\t</ResponsiveModalContent>\r\n\t\t</ResponsiveModal>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-thing/EditModal.tsx",
      "target": "components/ui/auto-thing/EditModal.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import {\r\n\tAccordion,\r\n\tAccordionContent,\r\n\tAccordionItem,\r\n\tAccordionTrigger,\r\n} from \"@/components/ui/accordion\";\r\nimport {\r\n\tCard,\r\n\tCardContent,\r\n\tCardDescription,\r\n\tCardHeader,\r\n\tCardTitle,\r\n} from \"@/components/ui/card\";\r\nimport type { SearchFilterWrapperType } from \"./types\";\r\nexport default function AutoThingSearchFilterWrapper({\r\n\tchildren,\r\n}: SearchFilterWrapperType) {\r\n\treturn (\r\n\t\t<Card className=\"flex gap-2\">\r\n\t\t\t<CardHeader>\r\n\t\t\t\t<CardTitle>Search</CardTitle>\r\n\t\t\t\t<CardDescription>Search Information</CardDescription>\r\n\t\t\t</CardHeader>\r\n\t\t\t<CardContent>\r\n\t\t\t\t<Accordion type=\"single\" collapsible>\r\n\t\t\t\t\t<AccordionItem value=\"search\">\r\n\t\t\t\t\t\t<AccordionTrigger>Open Search</AccordionTrigger>\r\n\t\t\t\t\t\t<AccordionContent>{children}</AccordionContent>\r\n\t\t\t\t\t</AccordionItem>\r\n\t\t\t\t</Accordion>\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-thing/SearchFilterWrapper.tsx",
      "target": "components/ui/auto-thing/SearchFilterWrapper.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { Button } from \"@/components/ui/button\";\r\nimport {\r\n\tCard,\r\n\tCardContent,\r\n\tCardDescription,\r\n\tCardFooter,\r\n\tCardHeader,\r\n\tCardTitle,\r\n} from \"@/components/ui/card\";\r\nimport type { TableWrapperCardType } from \"./types\";\r\nexport default function AutoThingTableWrapperCard({\r\n\tchildren,\r\n\ttitle,\r\n\tdescription,\r\n\topenCreateModal,\r\n\tpaginationData,\r\n}: TableWrapperCardType) {\r\n\treturn (\r\n\t\t<Card>\r\n\t\t\t<CardHeader className=\"flex flex-row justify-between\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<CardTitle>{title}</CardTitle>\r\n\t\t\t\t\t<CardDescription>{description}</CardDescription>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Button size=\"sm\" onClick={openCreateModal} className=\"mt-2 self-end\">\r\n\t\t\t\t\tCreate\r\n\t\t\t\t</Button>\r\n\t\t\t</CardHeader>\r\n\t\t\t<CardContent>{children}</CardContent>\r\n\t\t\t<CardFooter className=\"flex flex-row justify-between\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\tPage {paginationData.currentPage} of {paginationData.totalPage}\r\n\t\t\t\t</p>\r\n\t\t\t\t<div className=\"flex gap-2 \">\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tvariant=\"outline\"\r\n\t\t\t\t\t\tdisabled={!paginationData.canGoToPreviousPage}\r\n\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\tpaginationData.onPageChange(paginationData.currentPage - 1)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tPrevious\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tdisabled={!paginationData.canGoToNextPage}\r\n\t\t\t\t\t\tvariant=\"outline\"\r\n\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\tpaginationData.onPageChange(paginationData.currentPage + 1)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tNext\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</CardFooter>\r\n\t\t</Card>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-thing/TableWrapperCard.tsx",
      "target": "components/ui/auto-thing/TableWrapperCard.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { Eye } from \"lucide-react\";\r\nimport type { ActionButtonType } from \"./types\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport React from \"react\";\r\n\r\nexport default function AutoThingViewButtonDetails({\r\n\trow,\r\n\topenModal,\r\n}: ActionButtonType) {\r\n\treturn (\r\n\t\t<Button variant=\"outline\" size=\"icon\" onClick={openModal}>\r\n\t\t\t<Eye className=\"h-4 w-4\" />\r\n\t\t</Button>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-thing/ViewButtonDetails.tsx",
      "target": "components/ui/auto-thing/ViewButtonDetails.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import {\r\n\tAlertDialog,\r\n\tAlertDialogAction,\r\n\tAlertDialogCancel,\r\n\tAlertDialogContent,\r\n\tAlertDialogDescription,\r\n\tAlertDialogFooter,\r\n\tAlertDialogHeader,\r\n\tAlertDialogTitle,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport React from \"react\";\r\nimport { DescriptionList } from \"./DescriptionList\";\r\nimport type { ViewModalType } from \"./types\";\r\nexport default function ViewModal({ open, onClose, row }: ViewModalType) {\r\n\treturn (\r\n\t\t<AlertDialog open={open} onOpenChange={onClose}>\r\n\t\t\t<AlertDialogContent>\r\n\t\t\t\t<AlertDialogHeader>\r\n\t\t\t\t\t<AlertDialogTitle>View Details</AlertDialogTitle>\r\n\t\t\t\t\t<AlertDialogDescription>\r\n\t\t\t\t\t\tView the details of Row\r\n\t\t\t\t\t</AlertDialogDescription>\r\n\t\t\t\t\t<div className=\"h-[50vh] overflow-scroll\">\r\n\t\t\t\t\t\t<DescriptionList data={row as Record<string, unknown>} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</AlertDialogHeader>\r\n\t\t\t\t<AlertDialogFooter>\r\n\t\t\t\t\t<AlertDialogCancel>Cancel</AlertDialogCancel>\r\n\t\t\t\t\t<AlertDialogAction>Continue</AlertDialogAction>\r\n\t\t\t\t</AlertDialogFooter>\r\n\t\t\t</AlertDialogContent>\r\n\t\t</AlertDialog>\r\n\t);\r\n}\r\n",
      "path": "ui/auto-thing/ViewModal.tsx",
      "target": "components/ui/auto-thing/ViewModal.tsx"
    },
    {
      "type": "registry:ui",
      "content": "export * from \"auto-thing-zod\";\r\n",
      "path": "ui/auto-thing/types.tsx",
      "target": "components/ui/auto-thing/types.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipProvider,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { ChevronDown, ChevronUp, Copy, Search, X } from \"lucide-react\";\nimport { type ReactNode, useState } from \"react\";\n\ntype ValueRenderer = (value: unknown, key: string) => ReactNode;\n\nexport interface DescriptionListProps {\n\tdata: Record<string, unknown>;\n\ttitle?: string;\n\tclassName?: string;\n\texcludeKeys?: string[];\n\tincludeKeys?: string[];\n\tcustomFormatters?: Record<string, ValueRenderer>;\n\tcollapsible?: boolean;\n\tinitiallyCollapsed?: boolean;\n\tsearchable?: boolean;\n\tenableCopy?: boolean;\n\tdateFormat?: Intl.DateTimeFormatOptions;\n\tnestedListsCollapsible?: boolean;\n\tisWithoutCard?: boolean;\n}\n\nexport function DescriptionList({\n\tdata,\n\ttitle,\n\tclassName,\n\texcludeKeys = [],\n\tincludeKeys,\n\tcustomFormatters = {},\n\tcollapsible = false,\n\tinitiallyCollapsed = false,\n\tsearchable = false,\n\tenableCopy = true,\n\tdateFormat = {\n\t\tyear: \"numeric\",\n\t\tmonth: \"long\",\n\t\tday: \"numeric\",\n\t\thour: \"2-digit\",\n\t\tminute: \"2-digit\",\n\t},\n\tnestedListsCollapsible = true,\n\tisWithoutCard = false,\n}: DescriptionListProps) {\n\tconst [isCollapsed, setIsCollapsed] = useState(initiallyCollapsed);\n\tconst [searchTerm, setSearchTerm] = useState(\"\");\n\tconst [expandedNested, setExpandedNested] = useState<Record<string, boolean>>(\n\t\t{},\n\t);\n\n\t// Function to format the key for display\n\tconst formatKey = (key: string) => {\n\t\treturn key\n\t\t\t.replace(/([A-Z])/g, \" $1\") // Add space before capital letters\n\t\t\t.replace(/^./, (str) => str.toUpperCase()) // Capitalize first letter\n\t\t\t.trim(); // Remove any extra spaces\n\t};\n\n\t// Function to copy content to clipboard\n\tconst copyToClipboard = (text: string) => {\n\t\tnavigator.clipboard.writeText(text);\n\t};\n\n\t// Function to toggle nested object expansion\n\tconst toggleNestedExpansion = (key: string) => {\n\t\tsetExpandedNested((prev) => ({\n\t\t\t...prev,\n\t\t\t[key]: !prev[key],\n\t\t}));\n\t};\n\n\t// Function to render different value types\n\tconst renderValue = (value: unknown, key: string): ReactNode => {\n\t\t// Check for custom formatter first\n\t\tif (key in customFormatters && customFormatters[key]) {\n\t\t\treturn customFormatters[key]?.(value, key);\n\t\t}\n\n\t\tif (value === null || value === undefined) {\n\t\t\treturn (\n\t\t\t\t<span className=\"text-muted-foreground text-sm italic\">\n\t\t\t\t\tNot provided\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\n\t\tif (typeof value === \"boolean\") {\n\t\t\treturn (\n\t\t\t\t<Badge\n\t\t\t\t\tvariant={value ? \"default\" : \"outline\"}\n\t\t\t\t\tclassName={value ? \"bg-green-500 hover:bg-green-600\" : \"\"}\n\t\t\t\t>\n\t\t\t\t\t{value ? \"Yes\" : \"No\"}\n\t\t\t\t</Badge>\n\t\t\t);\n\t\t}\n\n\t\tif (value instanceof Date) {\n\t\t\treturn (\n\t\t\t\t<span className=\"font-medium\">\n\t\t\t\t\t{value.toLocaleDateString(\"en-US\", dateFormat)}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\n\t\tif (typeof value === \"object\") {\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\treturn value.length === 0 ? (\n\t\t\t\t\t<span className=\"text-muted-foreground text-sm italic\">\n\t\t\t\t\t\tEmpty array\n\t\t\t\t\t</span>\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"flex flex-col gap-1.5\">\n\t\t\t\t\t\t{value.map((item, index) => {\n\t\t\t\t\t\t\tif (typeof item === \"object\" && item !== null) {\n\t\t\t\t\t\t\t\tconst itemId = `${key}-${index}`;\n\t\t\t\t\t\t\t\tconst isExpanded = expandedNested[itemId] ?? false;\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tkey={`${key}-item-${typeof item === \"object\" && item !== null && \"id\" in item ? String(item.id) : index}`}\n\t\t\t\t\t\t\t\t\t\tclassName=\"w-full rounded-md border bg-muted/50 p-2 text-sm\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{nestedListsCollapsible ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"mb-1 flex items-center justify-between\">\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"font-medium text-xs\">{`Item ${index + 1}`}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"h-6 w-6 p-0\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => toggleNestedExpansion(itemId)}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{isExpanded ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ChevronUp className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ChevronDown className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t\t\t{!nestedListsCollapsible || isExpanded ? (\n\t\t\t\t\t\t\t\t\t\t\t<pre className=\"whitespace-pre-wrap font-mono text-xs\">\n\t\t\t\t\t\t\t\t\t\t\t\t{JSON.stringify(item, null, 2)}\n\t\t\t\t\t\t\t\t\t\t\t</pre>\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-muted-foreground text-xs\">\n\t\t\t\t\t\t\t\t\t\t\t\tClick to expand\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Badge\n\t\t\t\t\t\t\t\t\tkey={`${key}-badge-${String(item)}-${index}`}\n\t\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\t\tclassName=\"text-sm\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{String(item)}\n\t\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// For nested objects\n\t\t\tconst objectId = `nested-${key}`;\n\t\t\tconst isExpanded = expandedNested[objectId] ?? true;\n\n\t\t\treturn (\n\t\t\t\t<div className=\"rounded-md border bg-muted/50 p-2 text-sm\">\n\t\t\t\t\t{nestedListsCollapsible ? (\n\t\t\t\t\t\t<div className=\"mb-1 flex items-center justify-between\">\n\t\t\t\t\t\t\t<span className=\"font-medium text-xs\">Object details</span>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\tclassName=\"h-6 w-6 p-0\"\n\t\t\t\t\t\t\t\tonClick={() => toggleNestedExpansion(objectId)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{isExpanded ? (\n\t\t\t\t\t\t\t\t\t<ChevronUp className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<ChevronDown className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{!nestedListsCollapsible || isExpanded ? (\n\t\t\t\t\t\t<DescriptionList\n\t\t\t\t\t\t\tdata={value as Record<string, unknown>}\n\t\t\t\t\t\t\tclassName=\"border-none shadow-none\"\n\t\t\t\t\t\t\tcollapsible={false}\n\t\t\t\t\t\t\tsearchable={false}\n\t\t\t\t\t\t\tenableCopy={enableCopy}\n\t\t\t\t\t\t\tnestedListsCollapsible={nestedListsCollapsible}\n\t\t\t\t\t\t\tdateFormat={dateFormat}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<p className=\"text-muted-foreground text-xs\">Click to expand</p>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\t// For numbers, add special formatting\n\t\tif (typeof value === \"number\") {\n\t\t\tif (String(value).includes(\".\")) {\n\t\t\t\t// Likely a price or decimal number\n\t\t\t\treturn <span className=\"font-medium\">{value.toFixed(2)}</span>;\n\t\t\t}\n\t\t\treturn <span className=\"font-medium\">{value}</span>;\n\t\t}\n\n\t\t// Check if value is a date string\n\t\tif (typeof value === \"string\" && /^\\d{4}-\\d{2}-\\d{2}/.test(value)) {\n\t\t\ttry {\n\t\t\t\tconst date = new Date(value);\n\t\t\t\tif (!Number.isNaN(date.getTime())) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<span className=\"font-medium\">\n\t\t\t\t\t\t\t{date.toLocaleDateString(\"en-US\", dateFormat)}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// Not a valid date, continue with default rendering\n\t\t\t}\n\t\t}\n\n\t\t// For URLs, show as clickable links\n\t\tif (\n\t\t\ttypeof value === \"string\" &&\n\t\t\t(value.startsWith(\"http://\") ||\n\t\t\t\tvalue.startsWith(\"https://\") ||\n\t\t\t\tvalue.startsWith(\"www.\"))\n\t\t) {\n\t\t\treturn (\n\t\t\t\t<a\n\t\t\t\t\thref={value.startsWith(\"www.\") ? `https://${value}` : value}\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t\tclassName=\"text-primary hover:underline\"\n\t\t\t\t>\n\t\t\t\t\t{value}\n\t\t\t\t</a>\n\t\t\t);\n\t\t}\n\n\t\treturn <span>{String(value)}</span>;\n\t};\n\n\t// Filter the data based on search term and include/exclude lists\n\tconst filteredEntries = Object.entries(data).filter(([key, value]) => {\n\t\tif (excludeKeys.includes(key)) return false;\n\t\tif (includeKeys && !includeKeys.includes(key)) return false;\n\n\t\tif (searchTerm) {\n\t\t\tconst formattedKey = formatKey(key).toLowerCase();\n\t\t\tconst valueStr = String(value).toLowerCase();\n\t\t\tconst term = searchTerm.toLowerCase();\n\n\t\t\treturn formattedKey.includes(term) || valueStr.includes(term);\n\t\t}\n\n\t\treturn true;\n\t});\n\n\treturn (\n\t\t<Card className={cn(\"w-full shadow-sm\", className)}>\n\t\t\t<CardHeader\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"pb-2\",\n\t\t\t\t\tcollapsible && \"flex-row items-center justify-between\",\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t<CardTitle>{title || \"Details\"}</CardTitle>\n\t\t\t\t{collapsible && (\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\tonClick={() => setIsCollapsed(!isCollapsed)}\n\t\t\t\t\t\tclassName=\"ml-auto\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{isCollapsed ? (\n\t\t\t\t\t\t\t<ChevronDown className=\"h-4 w-4\" />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<ChevronUp className=\"h-4 w-4\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t</CardHeader>\n\t\t\t{(!collapsible || !isCollapsed) && (\n\t\t\t\t<CardContent>\n\t\t\t\t\t{searchable && (\n\t\t\t\t\t\t<div className=\"relative mb-4\">\n\t\t\t\t\t\t\t<div className=\"relative\">\n\t\t\t\t\t\t\t\t<Search className=\"absolute top-2.5 left-2 h-4 w-4 text-muted-foreground\" />\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tplaceholder=\"Search fields...\"\n\t\t\t\t\t\t\t\t\tvalue={searchTerm}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setSearchTerm(e.target.value)}\n\t\t\t\t\t\t\t\t\tclassName=\"pr-8 pl-8\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t{searchTerm && (\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"absolute top-1.5 right-1 h-7 w-7 p-0\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setSearchTerm(\"\")}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<X className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t<dl className=\"divide-y divide-border\">\n\t\t\t\t\t\t{filteredEntries.length > 0 ? (\n\t\t\t\t\t\t\tfilteredEntries.map(([key, value]) => (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tkey={key}\n\t\t\t\t\t\t\t\t\tclassName=\"grid grid-cols-1 place-items-baseline gap-2 py-3 sm:grid-cols-3\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<dt className=\"font-medium text-muted-foreground text-sm sm:col-span-1\">\n\t\t\t\t\t\t\t\t\t\t{formatKey(key)}\n\t\t\t\t\t\t\t\t\t</dt>\n\t\t\t\t\t\t\t\t\t<dd className=\"flex items-start gap-2 text-sm sm:col-span-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex-grow\">{renderValue(value, key)}</div>\n\t\t\t\t\t\t\t\t\t\t{enableCopy && (\n\t\t\t\t\t\t\t\t\t\t\t<TooltipProvider>\n\t\t\t\t\t\t\t\t\t\t\t\t<Tooltip>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"h-6 w-6 p-0 opacity-50 hover:opacity-100\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcopyToClipboard(JSON.stringify(value, null, 2))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Copy className=\"h-3.5 w-3.5\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TooltipTrigger>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TooltipContent>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs\">Copy value</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TooltipContent>\n\t\t\t\t\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t\t\t\t</TooltipProvider>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</dd>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"py-3 text-center text-muted-foreground text-sm\">\n\t\t\t\t\t\t\t\t{searchTerm ? \"No matching fields found\" : \"No data available\"}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</dl>\n\t\t\t\t</CardContent>\n\t\t\t)}\n\t\t</Card>\n\t);\n}\n",
      "path": "ui/auto-thing/DescriptionList.tsx",
      "target": "components/ui/auto-thing/DescriptionList.tsx"
    },
    {
      "type": "registry:ui",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\nimport {\r\n\tDialog,\r\n\tDialogClose,\r\n\tDialogContent,\r\n\tDialogDescription,\r\n\tDialogFooter,\r\n\tDialogHeader,\r\n\tDialogTitle,\r\n\tDialogTrigger,\r\n} from \"@/components/ui/dialog\";\r\nimport {\r\n\tDrawer,\r\n\tDrawerClose,\r\n\tDrawerContent,\r\n\tDrawerDescription,\r\n\tDrawerFooter,\r\n\tDrawerHeader,\r\n\tDrawerTitle,\r\n\tDrawerTrigger,\r\n} from \"@/components/ui/drawer\";\r\nimport { useIsMobile } from \"@/hooks/use-mobile\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface BaseProps {\r\n\tchildren: React.ReactNode;\r\n}\r\n\r\ninterface RootResponsiveModalProps extends BaseProps {\r\n\topen?: boolean;\r\n\tonOpenChange?: (open: boolean) => void;\r\n}\r\n\r\ninterface ResponsiveModalProps extends BaseProps {\r\n\tclassName?: string;\r\n\tasChild?: true;\r\n}\r\n\r\nconst ResponsiveModalContext = React.createContext<{ isDesktop: boolean }>({\r\n\tisDesktop: false,\r\n});\r\n\r\nconst useResponsiveModalContext = () => {\r\n\tconst context = React.useContext(ResponsiveModalContext);\r\n\tif (!context) {\r\n\t\tthrow new Error(\r\n\t\t\t\"ResponsiveModal components cannot be rendered outside the ResponsiveModal Context\",\r\n\t\t);\r\n\t}\r\n\treturn context;\r\n};\r\n\r\nconst ResponsiveModal = ({ children, ...props }: RootResponsiveModalProps) => {\r\n\tconst isMobile = useIsMobile();\r\n\tconst isDesktop = !isMobile;\r\n\tconst Component = isDesktop ? Dialog : Drawer;\r\n\r\n\treturn (\r\n\t\t<ResponsiveModalContext.Provider value={{ isDesktop }}>\r\n\t\t\t<Component {...props} {...(!isDesktop && { autoFocus: true })}>\r\n\t\t\t\t{children}\r\n\t\t\t</Component>\r\n\t\t</ResponsiveModalContext.Provider>\r\n\t);\r\n};\r\n\r\nconst ResponsiveModalTrigger = ({\r\n\tclassName,\r\n\tchildren,\r\n\t...props\r\n}: ResponsiveModalProps) => {\r\n\tconst { isDesktop } = useResponsiveModalContext();\r\n\tconst Component = isDesktop ? DialogTrigger : DrawerTrigger;\r\n\r\n\treturn (\r\n\t\t<Component className={className} {...props}>\r\n\t\t\t{children}\r\n\t\t</Component>\r\n\t);\r\n};\r\n\r\nconst ResponsiveModalClose = ({\r\n\tclassName,\r\n\tchildren,\r\n\t...props\r\n}: ResponsiveModalProps) => {\r\n\tconst { isDesktop } = useResponsiveModalContext();\r\n\tconst Component = isDesktop ? DialogClose : DrawerClose;\r\n\r\n\treturn (\r\n\t\t<Component className={className} {...props}>\r\n\t\t\t{children}\r\n\t\t</Component>\r\n\t);\r\n};\r\n\r\nconst ResponsiveModalContent = ({\r\n\tclassName,\r\n\tchildren,\r\n\t...props\r\n}: ResponsiveModalProps) => {\r\n\tconst { isDesktop } = useResponsiveModalContext();\r\n\tconst Component = isDesktop ? DialogContent : DrawerContent;\r\n\r\n\treturn (\r\n\t\t<Component className={className} {...props}>\r\n\t\t\t{children}\r\n\t\t</Component>\r\n\t);\r\n};\r\n\r\nconst ResponsiveModalDescription = ({\r\n\tclassName,\r\n\tchildren,\r\n\t...props\r\n}: ResponsiveModalProps) => {\r\n\tconst { isDesktop } = useResponsiveModalContext();\r\n\tconst Component = isDesktop ? DialogDescription : DrawerDescription;\r\n\r\n\treturn (\r\n\t\t<Component className={className} {...props}>\r\n\t\t\t{children}\r\n\t\t</Component>\r\n\t);\r\n};\r\n\r\nconst ResponsiveModalHeader = ({\r\n\tclassName,\r\n\tchildren,\r\n\t...props\r\n}: ResponsiveModalProps) => {\r\n\tconst { isDesktop } = useResponsiveModalContext();\r\n\tconst Component = isDesktop ? DialogHeader : DrawerHeader;\r\n\r\n\treturn (\r\n\t\t<Component className={className} {...props}>\r\n\t\t\t{children}\r\n\t\t</Component>\r\n\t);\r\n};\r\n\r\nconst ResponsiveModalTitle = ({\r\n\tclassName,\r\n\tchildren,\r\n\t...props\r\n}: ResponsiveModalProps) => {\r\n\tconst { isDesktop } = useResponsiveModalContext();\r\n\tconst Component = isDesktop ? DialogTitle : DrawerTitle;\r\n\r\n\treturn (\r\n\t\t<Component className={className} {...props}>\r\n\t\t\t{children}\r\n\t\t</Component>\r\n\t);\r\n};\r\n\r\nconst ResponsiveModalBody = ({\r\n\tclassName,\r\n\tchildren,\r\n\t...props\r\n}: ResponsiveModalProps) => {\r\n\treturn (\r\n\t\t<div className={cn(\"px-4 md:px-0\", className)} {...props}>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst ResponsiveModalFooter = ({\r\n\tclassName,\r\n\tchildren,\r\n\t...props\r\n}: ResponsiveModalProps) => {\r\n\tconst { isDesktop } = useResponsiveModalContext();\r\n\tconst Component = isDesktop ? DialogFooter : DrawerFooter;\r\n\r\n\treturn (\r\n\t\t<Component className={className} {...props}>\r\n\t\t\t{children}\r\n\t\t</Component>\r\n\t);\r\n};\r\n\r\nexport {\r\n\tResponsiveModal,\r\n\tResponsiveModalTrigger,\r\n\tResponsiveModalClose,\r\n\tResponsiveModalContent,\r\n\tResponsiveModalDescription,\r\n\tResponsiveModalHeader,\r\n\tResponsiveModalTitle,\r\n\tResponsiveModalBody,\r\n\tResponsiveModalFooter,\r\n};\r\n",
      "path": "ui/auto-thing/ResponsiveModal.tsx",
      "target": "components/ui/auto-thing/ResponsiveModal.tsx"
    }
  ]
}